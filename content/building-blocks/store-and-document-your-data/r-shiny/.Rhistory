layout(title = "GDP per Capita vs Life Expectancy",  # Customizing layout
xaxis = list(title = "GDP per Capita (log scale)"),
yaxis = list(title = "Life Expectancy"),
hoverlabel = list(bgcolor = "white"))  # Customizing hover label for readability
# Display the interactive plot
plotly_interactive
# Step 2: Convert the ggplot2 Scatter Plot to an Interactive Plotly Visualization
plotly_interactive <- ggplotly(gg_scatter_plot, tooltip = c("text", "size")) %>%
animation_opts(frame = 1000, easing = "elastic", redraw = TRUE) %>%  # Setting animation options for smooth transitions
animation_button(x = 1, xanchor = "right", y = 0, yanchor = "bottom") %>%  # Adding a play/pause animation button
animation_slider(currentvalue = list(prefix = "Year: ")) %>%  # Adding a slider for navigating through years
layout(title = "GDP per Capita vs Life Expectancy",  # Customizing layout
xaxis = list(title = "GDP per Capita (log scale)"),
yaxis = list(title = "Life Expectancy"),
hoverlabel = list(bgcolor = "white"))  # Customizing hover label for readability
# Display the interactive plot
plotly_interactive
# Define UI
ui <- fluidPage(
theme = bs_theme(bootswatch = "lumen"),
titlePanel("Adolescent Fertility and School Enrollment Interactive Dashboard"),
sidebarLayout(
sidebarPanel(width = 3,
sliderInput("selectedYear", "Select Year:",
min = min(db$year, na.rm = TRUE),
max = max(db$year, na.rm = TRUE),
value = min(db$year, na.rm = TRUE),
step = 1,
animate = TRUE
),
sliderInput("selectedCountry","Select Country:",
choices = unique(db$country),
multiple = TRUE,
selected = unique(db$country)) %>%
selectInput("regionSelect", "Select Region:",
choices = unique(db$region),
multiple = TRUE,
selected = unique(db$region))
),
mainPanel(width = 9,
plotlyOutput("plot")
)
)
)
# Define Server logic
server <- function(input, output, session) {
output$plot <- renderPlotly({
# Filter data based on selected region and year
db_filtered <- db %>%
filter(region %in% input$regionSelect, year == input$selectedYear, country %in% input$selectedCountry)
# Create the plot with ggplot2
p <- ggplot(db_filtered, aes(x = SE.SEC.ENRR.FE, y = SP.DYN.TFRT.IN, color = region, text = paste("Country:", country, "<br>Enrollment:", round(SE.SEC.ENRR.FE, 3), "<br>Fertility Rate:", round(SP.DYN.TFRT.IN, 3)))) +
geom_point(alpha = 0.6, size = 2) +
labs(
title = paste("% Female Enrollment in Secondary School and Fertility (", input$selectedYear, ")", sep = ""),
subtitle = "Analyze the relationship between school enrollment and fertility rates over time.",
caption = "Source: World Bank WDI",
x = "Gross secondary school enrollment, female (%)",
y = "Adolescent fertility rate (births per woman)"
) +
theme_minimal() +
ylim(0, 8) +
xlim(0, 200) +
scale_color_viridis_d() + # A visually pleasing color scale
theme(
legend.title = element_blank(),
legend.position = "top",
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(face = "italic", size = 12),
plot.caption = element_text(face = "italic", size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color = "grey24", size = 12),
axis.text.y = element_text(color = "grey24", size = 12),
axis.title = element_text(face = "bold", color = "grey24", size = 14),
axis.ticks = element_blank(),
plot.margin = margin(1, 1, 1, 1, "cm")
)
# Convert to Plotly for interactivity
ggplotly(p, tooltip = c("text")) %>%
layout(hoverlabel = list(bgcolor = "white", font = list(family = "Arial", size = 12)))
})
# Update available regions dynamically
observe({
updateSelectInput(session, "regionSelect", choices = unique(db$region))
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny); runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/plotly2/Plotly_advanced User Case.R')
# Filter data based on selected region and year
db_filtered <- db %>%
filter(region %in% input$regionSelect, year == input$selectedYear, country == input$selectedCountry)
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/plotly2/Plotly_advanced User Case.R')
View(db)
# Define UI
ui <- fluidPage(
theme = bs_theme(bootswatch = "lumen"),
titlePanel("Adolescent Fertility and School Enrollment Interactive Dashboard"),
sidebarLayout(
sidebarPanel(width = 3,
sliderInput("selectedYear", "Select Year:",
min = min(db$year, na.rm = TRUE),
max = max(db$year, na.rm = TRUE),
value = min(db$year, na.rm = TRUE),
step = 1,
animate = TRUE
),
sliderInput("selectedCountry","Select Country:",
choices = unique(db$country),
multiple = TRUE,
selected = unique(db$country)),
selectInput("regionSelect", "Select Region:",
choices = unique(db$region),
multiple = TRUE,
selected = unique(db$region))
),
mainPanel(width = 9,
plotlyOutput("plot")
)
)
)
# Define Server logic
server <- function(input, output, session) {
output$plot <- renderPlotly({
# Filter data based on selected region and year
db_filtered <- db %>%
filter(region %in% input$regionSelect, year == input$selectedYear, country == input$selectedCountry)
# Create the plot with ggplot2
p <- ggplot(db_filtered, aes(x = SE.SEC.ENRR.FE, y = SP.DYN.TFRT.IN, color = region, text = paste("Country:", country, "<br>Enrollment:", round(SE.SEC.ENRR.FE, 3), "<br>Fertility Rate:", round(SP.DYN.TFRT.IN, 3)))) +
geom_point(alpha = 0.6, size = 2) +
labs(
title = paste("% Female Enrollment in Secondary School and Fertility (", input$selectedYear, ")", sep = ""),
subtitle = "Analyze the relationship between school enrollment and fertility rates over time.",
caption = "Source: World Bank WDI",
x = "Gross secondary school enrollment, female (%)",
y = "Adolescent fertility rate (births per woman)"
) +
theme_minimal() +
ylim(0, 8) +
xlim(0, 200) +
scale_color_viridis_d() + # A visually pleasing color scale
theme(
legend.title = element_blank(),
legend.position = "top",
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(face = "italic", size = 12),
plot.caption = element_text(face = "italic", size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color = "grey24", size = 12),
axis.text.y = element_text(color = "grey24", size = 12),
axis.title = element_text(face = "bold", color = "grey24", size = 14),
axis.ticks = element_blank(),
plot.margin = margin(1, 1, 1, 1, "cm")
)
# Convert to Plotly for interactivity
ggplotly(p, tooltip = c("text")) %>%
layout(hoverlabel = list(bgcolor = "white", font = list(family = "Arial", size = 12)))
})
# Update available regions dynamically
observe({
updateSelectInput(session, "regionSelect", choices = unique(db$region))
})
}
# Define UI
ui <- fluidPage(
theme = bs_theme(bootswatch = "lumen"),
titlePanel("Adolescent Fertility and School Enrollment Interactive Dashboard"),
sidebarLayout(
sidebarPanel(width = 3,
sliderInput("selectedYear", "Select Year:",
min = min(db$year, na.rm = TRUE),
max = max(db$year, na.rm = TRUE),
value = min(db$year, na.rm = TRUE),
step = 1,
animate = TRUE
),
sliderInput("selectedCountry","Select Country:",
choices = unique(db$country),
multiple = TRUE,
selected = unique(db$country)),
selectInput("regionSelect", "Select Region:",
choices = unique(db$region),
multiple = TRUE,
selected = unique(db$region))
),
mainPanel(width = 9,
plotlyOutput("plot")
)
)
)
# Define UI
ui <- fluidPage(
theme = bs_theme(bootswatch = "lumen"),
titlePanel("Adolescent Fertility and School Enrollment Interactive Dashboard"),
sidebarLayout(
sidebarPanel(width = 3,
sliderInput("selectedYear", "Select Year:",
min = min(db$year, na.rm = TRUE),
max = max(db$year, na.rm = TRUE),
value = min(db$year, na.rm = TRUE),
step = 1,
animate = TRUE
),
selectInput("selectedCountry", "Select Country:",
choices = unique(db$country),
multiple = TRUE,
selected = unique(db$country)),
selectInput("regionSelect", "Select Region:",
choices = unique(db$region),
multiple = TRUE,
selected = unique(db$region))
),
mainPanel(width = 9,
plotlyOutput("plot")
)
)
)
# Define Server logic
server <- function(input, output, session) {
output$plot <- renderPlotly({
# Filter data based on selected region and year
db_filtered <- db %>%
filter(region %in% input$regionSelect, year == input$selectedYear, country == input$selectedCountry)
# Create the plot with ggplot2
p <- ggplot(db_filtered, aes(x = SE.SEC.ENRR.FE, y = SP.DYN.TFRT.IN, color = region, text = paste("Country:", country, "<br>Enrollment:", round(SE.SEC.ENRR.FE, 3), "<br>Fertility Rate:", round(SP.DYN.TFRT.IN, 3)))) +
geom_point(alpha = 0.6, size = 2) +
labs(
title = paste("% Female Enrollment in Secondary School and Fertility (", input$selectedYear, ")", sep = ""),
subtitle = "Analyze the relationship between school enrollment and fertility rates over time.",
caption = "Source: World Bank WDI",
x = "Gross secondary school enrollment, female (%)",
y = "Adolescent fertility rate (births per woman)"
) +
theme_minimal() +
ylim(0, 8) +
xlim(0, 200) +
scale_color_viridis_d() + # A visually pleasing color scale
theme(
legend.title = element_blank(),
legend.position = "top",
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(face = "italic", size = 12),
plot.caption = element_text(face = "italic", size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_text(color = "grey24", size = 12),
axis.text.y = element_text(color = "grey24", size = 12),
axis.title = element_text(face = "bold", color = "grey24", size = 14),
axis.ticks = element_blank(),
plot.margin = margin(1, 1, 1, 1, "cm")
)
# Convert to Plotly for interactivity
ggplotly(p, tooltip = c("text")) %>%
layout(hoverlabel = list(bgcolor = "white", font = list(family = "Arial", size = 12)))
})
# Update available regions dynamically
observe({
updateSelectInput(session, "regionSelect", choices = unique(db$region))
})
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/plotly2/Plotly_advanced User Case.R')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/plotly2/Plotly_advanced User Case.R')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/plotly2/Plotly_advanced User Case.R')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/plotly2/Plotly_advanced User Case.R')
# Convert ggplot to an interactive Plotly plot
plotly_interactive <- ggplotly(gg_scatter_plot, tooltip = c("text")) %>%
# Setting animation options for smooth transitions
animation_opts(frame = 1000, easing = "elastic", redraw = TRUE) %>%
# Adding a play/pause animation button
animation_button(x = 1, xanchor = "right", y = 0, yanchor = "bottom") %>%
# Adding a slider for navigating through years
animation_slider(currentvalue = list(prefix = "Year: ")) %>%
# Customizing layout and hover label for readability
layout(title = "GDP per Capita vs Life Expectancy",
xaxis = list(title = "GDP per Capita (log scale)", font = list(family = "Times New Roman")),
yaxis = list(title = "Life Expectancy", font = list(family = "Times New Roman")),
legend = list(title = "Continent",font = list(family = "Times New Roman", size = 12)),
hoverlabel = list(bgcolor = "white", font = list(family = "Times New Roman", size = 12), responsive = T))
# Display the interactive plot
plotly_interactive
shiny::runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/data-management')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/data-management')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/data-management')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/data-management')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/data-handling-2')
shinyApp(ui, server)
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/data-handling-2')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/EDA-3')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/EDA-3')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/EDA-3')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/EDA-3')
shiny::runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
ui <- navbarPage(
title = "Dynamic Theme Change",
theme = dark, # Set initial theme
id = "navbar", # Assign an ID to the navbar for dynamic theming
tabPanel("Home",
fluidPage(
titlePanel("Dynamic Theme Change"), # Title of the app
checkboxInput("tsh_mode", "TSH Mode", value = FALSE), # Checkbox for TSH mode
plotOutput("plot") # Output for the plot
)
),
# Add more tabPanels for additional content or features
tabPanel("Analysis",
fluidPage(
# Place additional content for analysis here
)
),
tabPanel("Data",
fluidPage(
# Include features or information related to the data
)
),
tabPanel("About",
fluidPage(
# Information about the app or the creator
)
)
)
# Custom themes
dark <- bs_theme(bg = "black", fg = "white") # Custom theme 1
TSH <- bs_theme(bg = "white", fg = "#f3ad42", primary = "#123261") # Custom theme 2 (The TSH colors)
ui <- navbarPage(
title = "Dynamic Theme Change",
theme = dark, # Set initial theme
id = "navbar", # Assign an ID to the navbar for dynamic theming
tabPanel("Home",
fluidPage(
titlePanel("Dynamic Theme Change"), # Title of the app
checkboxInput("tsh_mode", "TSH Mode", value = FALSE), # Checkbox for TSH mode
plotOutput("plot") # Output for the plot
)
),
# Add more tabPanels for additional content or features
tabPanel("Analysis",
fluidPage(
# Place additional content for analysis here
)
),
tabPanel("Data",
fluidPage(
# Include features or information related to the data
)
),
tabPanel("About",
fluidPage(
# Information about the app or the creator
)
)
)
server <- function(input, output, session) {
# Update the current theme based on the checkbox input
session$setCurrentTheme(if (input$tsh_mode) TSH else dark)
observe({
# Update the current theme based on the checkbox input
session$setCurrentTheme(if (input$tsh_mode) TSH else dark)
})
output$plot <- renderPlot({
geom_point(alpha = 0.7) +
ui <- navbarPage(
title = "Dynamic Theme Selection",
theme = dark, # Set initial theme
id = "navbar", # Assign an ID to the navbar for dynamic theming
tabPanel("Home",
fluidPage(
titlePanel("Dynamic Theme Change"), # Title of the app
checkboxInput("tsh_mode", "TSH Mode", value = FALSE), # Checkbox for TSH mode
plotOutput("plot") # Output for the plot
)
),
# Add more tabPanels for additional content or features
tabPanel("Analysis",
fluidPage(
# Place additional content for analysis here
)
),
tabPanel("Data",
fluidPage(
# Include features or information related to the data
)
),
tabPanel("About",
fluidPage(
# Information about the app or the creator
)
)
)
server <- function(input, output, session) {
observe({
# Update the current theme based on the checkbox input
session$setCurrentTheme(if (input$tsh_mode) TSH else dark)
})
output$plot <- renderPlot({
ggplot(gapminder, aes(x = gdpPercap, y = lifeExp, color = continent, size = pop)) +
geom_point(alpha = 0.7) +
scale_x_log10(labels = scales::dollar_format()) +
scale_y_continuous(limits = c(20, 90), breaks = seq(20, 90, 10)) +
scale_size(range = c(1, 10), breaks = c(1e+06, 1e+07, 1e+08), labels = scales::label_number_si()) +
scale_color_brewer(palette = "Set1") +
labs(
title = "Global Development Indicators",
subtitle = "Relationship between GDP per Capita and Life Expectancy",
x = "GDP per Capita (log scale)",
y = "Life Expectancy (Years)",
color = "Continent",
size = "Population"
) +
theme_minimal(base_size = 14) +
theme(
legend.position = "bottom",
plot.title = element_text(face = "bold"),
plot.subtitle = element_text(face = "italic"),
axis.text = element_text(color = "grey20"),
axis.title = element_text(face = "bold", color = "grey20")
)
})
}
shinyApp(ui, server)
library(bslib)
library(gapminder)
library(ggplot2)
# Custom themes
dark <- bs_theme(bg = "black", fg = "white") # Custom theme 1
TSH <- bs_theme(bg = "white", fg = "#f3ad42", primary = "#123261") # Custom theme 2 (The TSH colors)
ui <- navbarPage(
title = "Dynamic Theme Selection",
theme = dark, # Set initial theme
id = "navbar", # Assign an ID to the navbar for dynamic theming
tabPanel("Home",
fluidPage(
titlePanel("Dynamic Theme Change"), # Title of the app
checkboxInput("tsh_mode", "TSH Mode", value = FALSE), # Checkbox for TSH mode
plotOutput("plot") # Output for the plot
)
),
# Add more tabPanels for additional content or features
tabPanel("Analysis",
fluidPage(
# Place additional content for analysis here
)
),
tabPanel("Data",
fluidPage(
# Include features or information related to the data
)
),
tabPanel("About",
fluidPage(
# Information about the app or the creator
)
)
)
kl
kl
ui <- navbarPage(
title = "Dynamic Theme Selection",
theme = dark, # Set initial theme
id = "navbar", # Assign an ID to the navbar for dynamic theming
tabPanel("Home",
fluidPage(
titlePanel("Dynamic Theme Change"), # Title of the app
checkboxInput("tsh_mode", "TSH Mode", value = FALSE), # Checkbox for TSH mode
plotOutput("plot") # Output for the plot
)
),
# Add more tabPanels for additional content or features
tabPanel("Analysis",
fluidPage(
# Place additional content for analysis here
)
),
tabPanel("Data",
fluidPage(
# Include features or information related to the data
)
),
tabPanel("About",
fluidPage(
# Information about the app or the creator
)
)
)
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Fundamentals/BB5/DT-package.R')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Fundamentals/BB5/DT-package.R')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
shiny::runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/uy')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/dk')
runApp('Desktop/TSH/Tilburg Science Hub/Content/Building Blocks/R Shiny/Advanced/dk')
library(shiny); runApp('Desktop/TSH-Website/content/building-blocks/store-and-document-your-data/r-shiny/perfect-plot-source-code.R')
runApp('Desktop/TSH-Website/content/building-blocks/store-and-document-your-data/r-shiny/perfect-plot-source-code.R')
runApp('Desktop/TSH-Website/content/building-blocks/store-and-document-your-data/r-shiny/perfect-plot-source-code.R')
runApp('Desktop/TSH-Website/content/building-blocks/store-and-document-your-data/r-shiny/perfect-plot-source-code.R')
runApp('Desktop/TSH-Website/content/building-blocks/store-and-document-your-data/r-shiny/perfect-plot-source-code.R')
