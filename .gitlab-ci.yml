stages:
  - build
  - deploy

variables:
  # Application settings
  APP_NAME: "flask-website" # only alphanumerical characters and underscores (_) allowed
  APP_GROUP: "tsh"
  NAMESPACE: "${APP_GROUP}"

  # Deployment settings
  LISTEN_PORT: 8080
  DOMAIN: "flask.tilburgsciencehub.com"

  # # Hardware setting (see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/)
  # # Uncomment the following lines to set the CPU and memory requests and limits
  # CPU_REQUEST: "150m"
  # CPU_LIMIT: "150m"
  # MEMORY_REQUEST: "300Mi"
  # MEMORY_LIMIT: "300Mi"

  # Building settings
  ACR_URL: "tilburgai.azurecr.io"
  DOCKER_IMAGE: "${ACR_URL}/$APP_NAME"

build:
  stage: build
  tags:
    - k8s
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p secret && echo "$CERT_PEM_CONTENT" > secret/cert.pem
    - echo "{\"auths\":{\"$ACR_URL\":{\"username\":\"$ACR_USERNAME\",\"password\":\"$ACR_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $DOCKER_IMAGE:$CI_COMMIT_SHA

deploy:
  stage: deploy
  tags:
    - k8s
  image: bitnami/kubectl:latest
  only:
    - production
  script:
    - export DOMAIN=$APP_NAME.$HOST_DOMAIN
    - echo "$KUBE_CONFIG_DATA" | base64 -d > ~/.kube/config
    - kubectl delete secret $APP_NAME --ignore-not-found -n $NAMESPACE
    - |
      kubectl create secret generic $APP_NAME \
        --from-literal DEBUG=False \
        --from-literal AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
        --from-literal AWS_BUCKET=$AWS_BUCKET \
        --from-literal AWS_REGION=$AWS_REGION \
        --from-literal AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
        --from-literal SECRET_APP_ID=$SECRET_APP_ID \
        --from-literal SECRET_APP_KEY=$SECRET_APP_KEY \
        --from-literal SECRET_INSTALLATION_ID=$SECRET_INSTALLATION_ID \
        -n $NAMESPACE
    - envsubst < deployment/deployment.yaml | kubectl apply -f -
    - envsubst < deployment/ingress.yaml | kubectl apply -f -
    - envsubst < deployment/tls.yaml | kubectl apply -f -
    - echo "App listening on https://$DOMAIN ..."